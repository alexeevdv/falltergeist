#include <sstream>
#include <memory>
#include "Exception.h"
#include "VM/Fallout/OpcodeFactory.h"
#include "VM/Fallout/Handler/Opcode8002.h"
#include "VM/Fallout/Handler/Opcode8003.h"
#include "VM/Fallout/Handler/Opcode8004.h"
#include "VM/Fallout/Handler/Opcode8005.h"
#include "VM/Fallout/Handler/Opcode800C.h"
#include "VM/Fallout/Handler/Opcode800D.h"
#include "VM/Fallout/Handler/Opcode8010.h"
#include "VM/Fallout/Handler/Opcode8012.h"
#include "VM/Fallout/Handler/Opcode8013.h"
#include "VM/Fallout/Handler/Opcode8014.h"
#include "VM/Fallout/Handler/Opcode8015.h"
#include "VM/Fallout/Handler/Opcode8016.h"
#include "VM/Fallout/Handler/Opcode8018.h"
#include "VM/Fallout/Handler/Opcode8019.h"
#include "VM/Fallout/Handler/Opcode801A.h"
#include "VM/Fallout/Handler/Opcode801B.h"
#include "VM/Fallout/Handler/Opcode801C.h"
#include "VM/Fallout/Handler/Opcode8027.h"
#include "VM/Fallout/Handler/Opcode8028.h"
#include "VM/Fallout/Handler/Opcode8029.h"
#include "VM/Fallout/Handler/Opcode802A.h"
#include "VM/Fallout/Handler/Opcode802B.h"
#include "VM/Fallout/Handler/Opcode802C.h"
#include "VM/Fallout/Handler/Opcode802F.h"
#include "VM/Fallout/Handler/Opcode8030.h"
#include "VM/Fallout/Handler/Opcode8031.h"
#include "VM/Fallout/Handler/Opcode8032.h"
#include "VM/Fallout/Handler/OpcodeComparisonHandler.h"
#include "VM/Fallout/Handler/Opcode8039.h"
#include "VM/Fallout/Handler/Opcode803A.h"
#include "VM/Fallout/Handler/Opcode803B.h"
#include "VM/Fallout/Handler/Opcode803C.h"
#include "VM/Fallout/Handler/Opcode803D.h"
#include "VM/Fallout/Handler/Opcode803E.h"
#include "VM/Fallout/Handler/Opcode803F.h"
#include "VM/Fallout/Handler/Opcode8040.h"
#include "VM/Fallout/Handler/Opcode8041.h"
#include "VM/Fallout/Handler/Opcode8042.h"
#include "VM/Fallout/Handler/Opcode8043.h"
#include "VM/Fallout/Handler/Opcode8044.h"
#include "VM/Fallout/Handler/Opcode8045.h"
#include "VM/Fallout/Handler/Opcode8046.h"
#include "VM/Fallout/Handler/Opcode80A1.h"
#include "VM/Fallout/Handler/Opcode80A3.h"
#include "VM/Fallout/Handler/Opcode80A4.h"
#include "VM/Fallout/Handler/Opcode80A6.h"
#include "VM/Fallout/Handler/Opcode80A7.h"
#include "VM/Fallout/Handler/Opcode80A8.h"
#include "VM/Fallout/Handler/Opcode80A9.h"
#include "VM/Fallout/Handler/Opcode80AA.h"
#include "VM/Fallout/Handler/Opcode80AB.h"
#include "VM/Fallout/Handler/Opcode80AC.h"
#include "VM/Fallout/Handler/Opcode80AE.h"
#include "VM/Fallout/Handler/Opcode80AF.h"
#include "VM/Fallout/Handler/Opcode80B0.h"
#include "VM/Fallout/Handler/Opcode80B2.h"
#include "VM/Fallout/Handler/Opcode80B4.h"
#include "VM/Fallout/Handler/Opcode80B6.h"
#include "VM/Fallout/Handler/Opcode80B7.h"
#include "VM/Fallout/Handler/Opcode80B8.h"
#include "VM/Fallout/Handler/Opcode80B9.h"
#include "VM/Fallout/Handler/Opcode80BA.h"
#include "VM/Fallout/Handler/Opcode80BB.h"
#include "VM/Fallout/Handler/Opcode80BC.h"
#include "VM/Fallout/Handler/Opcode80BD.h"
#include "VM/Fallout/Handler/Opcode80BE.h"
#include "VM/Fallout/Handler/Opcode80BF.h"
#include "VM/Fallout/Handler/Opcode80C1.h"
#include "VM/Fallout/Handler/Opcode80C2.h"
#include "VM/Fallout/Handler/Opcode80C3.h"
#include "VM/Fallout/Handler/Opcode80C4.h"
#include "VM/Fallout/Handler/Opcode80C5.h"
#include "VM/Fallout/Handler/Opcode80C6.h"
#include "VM/Fallout/Handler/Opcode80C7.h"
#include "VM/Fallout/Handler/Opcode80C8.h"
#include "VM/Fallout/Handler/Opcode80C9.h"
#include "VM/Fallout/Handler/Opcode80CA.h"
#include "VM/Fallout/Handler/Opcode80CBHandler.h"
#include "VM/Fallout/Handler/Opcode80CCHandler.h"
#include "VM/Fallout/Handler/Opcode80CEHandler.h"
#include "VM/Fallout/Handler/Opcode80CFHandler.h"
#include "VM/Fallout/Handler/Opcode80D0Handler.h"
#include "VM/Fallout/Handler/Opcode80D2Handler.h"
#include "VM/Fallout/Handler/Opcode80D3Handler.h"
#include "VM/Fallout/Handler/Opcode80D4Handler.h"
#include "VM/Fallout/Handler/Opcode80D5Handler.h"
#include "VM/Fallout/Handler/Opcode80D8Handler.h"
#include "VM/Fallout/Handler/Opcode80D9Handler.h"
#include "VM/Fallout/Handler/Opcode80DAHandler.h"
#include "VM/Fallout/Handler/Opcode80DCHandler.h"
#include "VM/Fallout/Handler/Opcode80DEHandler.h"
#include "VM/Fallout/Handler/Opcode80DFHandler.h"
#include "VM/Fallout/Handler/Opcode80E1Handler.h"
#include "VM/Fallout/Handler/Opcode80E3Handler.h"
#include "VM/Fallout/Handler/Opcode80E4Handler.h"
#include "VM/Fallout/Handler/Opcode80E5Handler.h"
#include "VM/Fallout/Handler/Opcode80E7Handler.h"
#include "VM/Fallout/Handler/Opcode80E8Handler.h"
#include "VM/Fallout/Handler/Opcode80E9Handler.h"
#include "VM/Fallout/Handler/Opcode80EAHandler.h"
#include "VM/Fallout/Handler/Opcode80ECHandler.h"
#include "VM/Fallout/Handler/Opcode80EFHandler.h"
#include "VM/Fallout/Handler/Opcode80F0Handler.h"
#include "VM/Fallout/Handler/Opcode80F1Handler.h"
#include "VM/Fallout/Handler/Opcode80F2Handler.h"
#include "VM/Fallout/Handler/Opcode80F3Handler.h"
#include "VM/Fallout/Handler/Opcode80F4Handler.h"
#include "VM/Fallout/Handler/Opcode80F6Handler.h"
#include "VM/Fallout/Handler/Opcode80F7Handler.h"
#include "VM/Fallout/Handler/Opcode80F8Handler.h"
#include "VM/Fallout/Handler/Opcode80F9Handler.h"
#include "VM/Fallout/Handler/Opcode80FAHandler.h"
#include "VM/Fallout/Handler/Opcode80FBHandler.h"
#include "VM/Fallout/Handler/Opcode80FCHandler.h"
#include "VM/Fallout/Handler/Opcode80FDHandler.h"
#include "VM/Fallout/Handler/Opcode80FEHandler.h"
#include "VM/Fallout/Handler/Opcode80FF.h"
#include "VM/Fallout/Handler/Opcode8100.h"
#include "VM/Fallout/Handler/Opcode8101.h"
#include "VM/Fallout/Handler/Opcode8102.h"
#include "VM/Fallout/Handler/Opcode8105.h"
#include "VM/Fallout/Handler/Opcode8106.h"
#include "VM/Fallout/Handler/Opcode8107.h"
#include "VM/Fallout/Handler/Opcode810A.h"
#include "VM/Fallout/Handler/Opcode810B.h"
#include "VM/Fallout/Handler/Opcode810C.h"
#include "VM/Fallout/Handler/Opcode810D.h"
#include "VM/Fallout/Handler/Opcode810E.h"
#include "VM/Fallout/Handler/Opcode810F.h"
#include "VM/Fallout/Handler/Opcode8113.h"
#include "VM/Fallout/Handler/Opcode8115.h"
#include "VM/Fallout/Handler/Opcode8116.h"
#include "VM/Fallout/Handler/Opcode8117.h"
#include "VM/Fallout/Handler/Opcode8118.h"
#include "VM/Fallout/Handler/Opcode8119.h"
#include "VM/Fallout/Handler/Opcode811CHandler.h"
#include "VM/Fallout/Handler/Opcode811DHandler.h"
#include "VM/Fallout/Handler/Opcode811EHandler.h"
#include "VM/Fallout/Handler/Opcode8120.h"
#include "VM/Fallout/Handler/Opcode8121.h"
#include "VM/Fallout/Handler/Opcode8122.h"
#include "VM/Fallout/Handler/Opcode8123.h"
#include "VM/Fallout/Handler/Opcode8126.h"
#include "VM/Fallout/Handler/Opcode8127.h"
#include "VM/Fallout/Handler/Opcode8128.h"
#include "VM/Fallout/Handler/Opcode8129.h"
#include "VM/Fallout/Handler/Opcode812DHandler.h"
#include "VM/Fallout/Handler/Opcode812EHandler.h"
#include "VM/Fallout/Handler/Opcode812FHandler.h"
#include "VM/Fallout/Handler/Opcode8130.h"
#include "VM/Fallout/Handler/Opcode8131Handler.h"
#include "VM/Fallout/Handler/Opcode8132Handler.h"
#include "VM/Fallout/Handler/Opcode8133Handler.h"
#include "VM/Fallout/Handler/Opcode8134Handler.h"
#include "VM/Fallout/Handler/Opcode8136Handler.h"
#include "VM/Fallout/Handler/Opcode8137Handler.h"
#include "VM/Fallout/Handler/Opcode8138Handler.h"
#include "VM/Fallout/Handler/Opcode8139Handler.h"
#include "VM/Fallout/Handler/Opcode813CHandler.h"
#include "VM/Fallout/Handler/Opcode8143Handler.h"
#include "VM/Fallout/Handler/Opcode8145Handler.h"
#include "VM/Fallout/Handler/Opcode8147Handler.h"
#include "VM/Fallout/Handler/Opcode8149Handler.h"
#include "VM/Fallout/Handler/Opcode814AHandler.h"
#include "VM/Fallout/Handler/Opcode814BHandler.h"
#include "VM/Fallout/Handler/Opcode814CHandler.h"
#include "VM/Fallout/Handler/Opcode814EHandler.h"
#include "VM/Fallout/Handler/Opcode8150Handler.h"
#include "VM/Fallout/Handler/Opcode8151Handler.h"
#include "VM/Fallout/Handler/Opcode8152Handler.h"
#include "VM/Fallout/Handler/Opcode8153Handler.h"
#include "VM/Fallout/Handler/Opcode8154Handler.h"
#include "VM/Fallout/Handler/Opcode9001Handler.h"
#include "VM/Fallout/Handler/OpcodeC001Handler.h"
#include "VM/Fallout/Handler/OpcodeA001Handler.h"
#include "VM/Script.h"

namespace Falltergeist
{
    namespace VM
    {
        std::unique_ptr<OpcodeHandler>
        OpcodeFactory::createOpcode(unsigned int number, std::shared_ptr<VM::Script> script)
        {
            switch (number)
            {
                case 0x8000:
                    return std::make_unique<OpcodeHandler>(script); // O_NOOP
                case 0x8002:
                    return std::make_unique<Opcode8002>(script);
                case 0x8003:
                    return std::make_unique<Opcode8003>(script);
                case 0x8004:
                    return std::make_unique<Opcode8004>(script);
                case 0x8005:
                    return std::make_unique<Opcode8005>(script);
                case 0x800C:
                    return std::make_unique<Opcode800C>(script);
                case 0x800D:
                    return std::make_unique<Opcode800D>(script);
                case 0x8010:
                    return std::make_unique<Opcode8010>(script);
                case 0x8012:
                    return std::make_unique<Opcode8012>(script);
                case 0x8013:
                    return std::make_unique<Opcode8013>(script);
                case 0x8014:
                    return std::make_unique<Opcode8014>(script);
                case 0x8015:
                    return std::make_unique<Opcode8015>(script);
                case 0x8016:
                    return std::make_unique<Opcode8016>(script);
                case 0x8018:
                    return std::make_unique<Opcode8018>(script);
                case 0x8019:
                    return std::make_unique<Opcode8019>(script);
                case 0x801A:
                    return std::make_unique<Opcode801A>(script);
                case 0x801B:
                    return std::make_unique<Opcode801B>(script);
                case 0x801C:
                    return std::make_unique<Opcode801C>(script);
                case 0x8027:
                    return std::make_unique<Opcode8027>(script);
                case 0x8028:
                    return std::make_unique<Opcode8028>(script);
                case 0x8029:
                    return std::make_unique<Opcode8029>(script);
                case 0x802A:
                    return std::make_unique<Opcode802A>(script);
                case 0x802B:
                    return std::make_unique<Opcode802B>(script);
                case 0x802C:
                    return std::make_unique<Opcode802C>(script);
                case 0x802F:
                    return std::make_unique<Opcode802F>(script);
                case 0x8030:
                    return std::make_unique<Opcode8030>(script);
                case 0x8031:
                    return std::make_unique<Opcode8031>(script);
                case 0x8032:
                    return std::make_unique<Opcode8032>(script);
                case 0x8033:
                    return std::make_unique<OpcodeComparison>(script, OpcodeComparison::Type::EQUAL);
                case 0x8034:
                    return std::make_unique<OpcodeComparison>(script,
                                                                       OpcodeComparison::Type::NOT_EQUAL);
                case 0x8035:
                    return std::make_unique<OpcodeComparison>(script,
                                                                       OpcodeComparison::Type::LESS_EQUAL);
                case 0x8036:
                    return std::make_unique<OpcodeComparison>(script,
                                                                       OpcodeComparison::Type::GREATER_EQUAL);
                case 0x8037:
                    return std::make_unique<OpcodeComparison>(script, OpcodeComparison::Type::LESS);
                case 0x8038:
                    return std::make_unique<OpcodeComparison>(script,
                                                                       OpcodeComparison::Type::GREATER);
                case 0x8039:
                    return std::make_unique<Opcode8039>(script);
                case 0x803A:
                    return std::make_unique<Opcode803A>(script);
                case 0x803B:
                    return std::make_unique<Opcode803B>(script);
                case 0x803C:
                    return std::make_unique<Opcode803C>(script);
                case 0x803D:
                    return std::make_unique<Opcode803D>(script);
                case 0x803E:
                    return std::make_unique<Opcode803E>(script);
                case 0x803F:
                    return std::make_unique<Opcode803F>(script);
                case 0x8040:
                    return std::make_unique<Opcode8040>(script);
                case 0x8041:
                    return std::make_unique<Opcode8041>(script);
                case 0x8042:
                    return std::make_unique<Opcode8042>(script); // bwxor
                case 0x8043:
                    return std::make_unique<Opcode8043>(script); // bwnot
                case 0x8044:
                    return std::make_unique<Opcode8044>(script);
                case 0x8045:
                    return std::make_unique<Opcode8045>(script);
                case 0x8046:
                    return std::make_unique<Opcode8046>(script);
                case 0x80A1:
                    return std::make_unique<Opcode80A1>(script);
                case 0x80A3:
                    return std::make_unique<Opcode80A3>(script);
                case 0x80A4:
                    return std::make_unique<Opcode80A4>(script);
                case 0x80A6:
                    return std::make_unique<Opcode80A6>(script);
                case 0x80A7:
                    return std::make_unique<Opcode80A7>(script);
                case 0x80A8:
                    return std::make_unique<Opcode80A8>(script);
                case 0x80A9:
                    return std::make_unique<Opcode80A9>(script);
                case 0x80AA:
                    return std::make_unique<Opcode80AA>(script);
                case 0x80AB:
                    return std::make_unique<Opcode80AB>(script);
                case 0x80AC:
                    return std::make_unique<Opcode80AC>(script);
                case 0x80AE:
                    return std::make_unique<Opcode80AE>(script);
                case 0x80AF:
                    return std::make_unique<Opcode80AF>(script);
                case 0x80B0:
                    return std::make_unique<Opcode80B0>(script);
                case 0x80B2:
                    return std::make_unique<Opcode80B2>(script);
                case 0x80B4:
                    return std::make_unique<Opcode80B4>(script);
                case 0x80B6:
                    return std::make_unique<Opcode80B6>(script);
                case 0x80B7:
                    return std::make_unique<Opcode80B7>(script);
                case 0x80B8:
                    return std::make_unique<Opcode80B8>(script);
                case 0x80B9:
                    return std::make_unique<Opcode80B9>(script);
                case 0x80BA:
                    return std::make_unique<Opcode80BA>(script);
                case 0x80BB:
                    return std::make_unique<Opcode80BB>(script);
                case 0x80BC:
                    return std::make_unique<Opcode80BC>(script); // self_obj
                case 0x80BD:
                    return std::make_unique<Opcode80BD>(script); // source_obj
                case 0x80BE:
                    return std::make_unique<Opcode80BE>(script); // target_obj
                case 0x80BF:
                    return std::make_unique<Opcode80BF>(script); // dude_obj
                case 0x80C0:
                    return std::make_unique<Opcode80BE>(
                            script); // obj_being_used_with - uses the same code as target_obj in original
                case 0x80C1:
                    return std::make_unique<Opcode80C1>(script);
                case 0x80C2:
                    return std::make_unique<Opcode80C2>(script);
                case 0x80C3:
                    return std::make_unique<Opcode80C3>(script);
                case 0x80C4:
                    return std::make_unique<Opcode80C4>(script);
                case 0x80C5:
                    return std::make_unique<Opcode80C5>(script);
                case 0x80C6:
                    return std::make_unique<Opcode80C6>(script);
                case 0x80C7:
                    return std::make_unique<Opcode80C7>(script);
                case 0x80C8:
                    return std::make_unique<Opcode80C8>(script);
                case 0x80C9:
                    return std::make_unique<Opcode80C9>(script);
                case 0x80CA:
                    return std::make_unique<Opcode80CA>(script);
                case 0x80CB:
                    return std::make_unique<Opcode80CB>(script);
                case 0x80CC:
                    return std::make_unique<Opcode80CC>(script);
                case 0x80CE:
                    return std::make_unique<Opcode80CE>(script);
                case 0x80CF:
                    return std::make_unique<Opcode80CF>(script);
                case 0x80D0:
                    return std::make_unique<Opcode80D0>(script);
                case 0x80D2:
                    return std::make_unique<Opcode80D2>(script);
                case 0x80D3:
                    return std::make_unique<Opcode80D3>(script);
                case 0x80D4:
                    return std::make_unique<Opcode80D4>(script);
                case 0x80D5:
                    return std::make_unique<Opcode80D5>(script);
                case 0x80D8:
                    return std::make_unique<Opcode80D8>(script);
                case 0x80D9:
                    return std::make_unique<Opcode80D9>(script);
                case 0x80DA:
                    return std::make_unique<Opcode80DA>(script);
                case 0x80DC:
                    return std::make_unique<Opcode80DC>(script);
                case 0x80DE:
                    return std::make_unique<Opcode80DE>(script);
                case 0x80DF:
                    return std::make_unique<Opcode80DF>(script);
                case 0x80E1:
                    return std::make_unique<Opcode80E1>(script);
                case 0x80E3:
                    return std::make_unique<Opcode80E3>(script);
                case 0x80E4:
                    return std::make_unique<Opcode80E4>(script);
                case 0x80E5:
                    return std::make_unique<Opcode80E5>(script);
                case 0x80E7:
                    return std::make_unique<Opcode80E7>(script);
                case 0x80E8:
                    return std::make_unique<Opcode80E8>(script);
                case 0x80E9:
                    return std::make_unique<Opcode80E9>(script);
                case 0x80EA:
                    return std::make_unique<Opcode80EA>(script);
                case 0x80EC:
                    return std::make_unique<Opcode80EC>(script);
                case 0x80EF:
                    return std::make_unique<Opcode80EF>(script);
                case 0x80F0:
                    return std::make_unique<Opcode80F0>(script);
                case 0x80F1:
                    return std::make_unique<Opcode80F1>(script);
                case 0x80F2:
                    return std::make_unique<Opcode80F2>(script);
                case 0x80F3:
                    return std::make_unique<Opcode80F3>(script);
                case 0x80F4:
                    return std::make_unique<Opcode80F4>(script);
                case 0x80F6:
                    return std::make_unique<Opcode80F6>(script);
                case 0x80F7:
                    return std::make_unique<Opcode80F7>(script);
                case 0x80F8:
                    return std::make_unique<Opcode80F8>(script);
                case 0x80F9:
                    return std::make_unique<Opcode80F9>(script);
                case 0x80FA:
                    return std::make_unique<Opcode80FA>(script);
                case 0x80FB:
                    return std::make_unique<Opcode80FB>(script);
                case 0x80FC:
                    return std::make_unique<Opcode80FC>(script);
                case 0x80FD:
                    return std::make_unique<Opcode80FD>(script);
                case 0x80FE:
                    return std::make_unique<Opcode80FE>(script);
                case 0x80FF:
                    return std::make_unique<Opcode80FF>(script);
                case 0x8100:
                    return std::make_unique<Opcode8100>(script);
                case 0x8101:
                    return std::make_unique<Opcode8101>(script);
                case 0x8102:
                    return std::make_unique<Opcode8102>(script);
                case 0x8105:
                    return std::make_unique<Opcode8105>(script);
                case 0x8106:
                    return std::make_unique<Opcode8106>(script);
                case 0x8107:
                    return std::make_unique<Opcode8107>(script);
                case 0x810A:
                    return std::make_unique<Opcode810A>(script);
                case 0x810B:
                    return std::make_unique<Opcode810B>(script);
                case 0x810C:
                    return std::make_unique<Opcode810C>(script);
                case 0x810D:
                    return std::make_unique<Opcode810D>(script);
                case 0x810E:
                    return std::make_unique<Opcode810E>(script);
                case 0x810F:
                    return std::make_unique<Opcode810F>(script);
                case 0x8113:
                    return std::make_unique<Opcode8113>(script);
                case 0x8115:
                    return std::make_unique<Opcode8115>(script);
                case 0x8116:
                    return std::make_unique<Opcode8116>(script);
                case 0x8117:
                    return std::make_unique<Opcode8117>(script);
                case 0x8118:
                    return std::make_unique<Opcode8118>(script);
                case 0x8119:
                    return std::make_unique<Opcode8119>(script);
                case 0x811C:
                    return std::make_unique<Opcode811C>(script);
                case 0x811D:
                    return std::make_unique<Opcode811D>(script);
                case 0x811E:
                    return std::make_unique<Opcode811E>(script);
                case 0x8120:
                    return std::make_unique<Opcode8120>(script);
                case 0x8121:
                    return std::make_unique<Opcode8121>(script);
                case 0x8122:
                    return std::make_unique<Opcode8122>(script);
                case 0x8123:
                    return std::make_unique<Opcode8123>(script);
                case 0x8126:
                    return std::make_unique<Opcode8126>(script);
                case 0x8127:
                    return std::make_unique<Opcode8127>(script);
                case 0x8128:
                    return std::make_unique<Opcode8128>(script);
                case 0x8129:
                    return std::make_unique<Opcode8129>(script);
                case 0x812D:
                    return std::make_unique<Opcode812D>(script);
                case 0x812E:
                    return std::make_unique<Opcode812E>(script);
                case 0x812F:
                    return std::make_unique<Opcode812F>(script);
                case 0x8130:
                    return std::make_unique<Opcode8130>(script);
                case 0x8131:
                    return std::make_unique<Opcode8131>(script);
                case 0x8132:
                    return std::make_unique<Opcode8132>(script);
                case 0x8133:
                    return std::make_unique<Opcode8133>(script);
                case 0x8134:
                    return std::make_unique<Opcode8134>(script);
                case 0x8136:
                    return std::make_unique<Opcode8136>(script);
                case 0x8137:
                    return std::make_unique<Opcode8137>(script);
                case 0x8138:
                    return std::make_unique<Opcode8138>(script);
                case 0x8139:
                    return std::make_unique<Opcode8139>(script);
                case 0x813C:
                    return std::make_unique<Opcode813C>(script);
                case 0x8143:
                    return std::make_unique<Opcode8143>(script);
                case 0x8145:
                    return std::make_unique<Opcode8145>(script);
                case 0x8147:
                    return std::make_unique<Opcode8147>(script);
                case 0x8149:
                    return std::make_unique<Opcode8149>(script);
                case 0x814A:
                    return std::make_unique<Opcode814A>(script);
                case 0x814B:
                    return std::make_unique<Opcode814B>(script);
                case 0x814C:
                    return std::make_unique<Opcode814C>(script);
                case 0x814E:
                    return std::make_unique<Opcode814E>(script);
                case 0x8150:
                    return std::make_unique<Opcode8150>(script);
                case 0x8151:
                    return std::make_unique<Opcode8151>(script);
                case 0x8152:
                    return std::make_unique<Opcode8152>(script);
                case 0x8153:
                    return std::make_unique<Opcode8153>(script);
                case 0x8154:
                    return std::make_unique<Opcode8154>(script);
                case 0x9001:
                    return std::make_unique<Opcode9001>(script);
                case 0xC001:
                    return std::make_unique<OpcodeC001>(script);
                case 0xA001:
                    return std::make_unique<OpcodeA001>(script);
                default: {
                    std::stringstream ss;
                    ss << "OpcodeFactory::createOpcode() - unimplemented opcode: " << std::hex << number;
                    throw Exception(ss.str());
                }
            }
        }
    }
}
